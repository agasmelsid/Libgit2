FIND_PKGLIBRARIES(LIBSSH2 libssh2)

IF(USE_SSH STREQUAL ON)
	IF(LIBSSH2_FOUND)
		SET(SSH_BACKEND "libssh2")
	ENDIF()
ELSEIF(USE_SSH)
	SET(SSH_BACKEND ${USE_SSH})
ELSE()
	SET(SSH_BACKEND NO)
ENDIF()

IF(SSH_BACKEND)
	IF(SSH_BACKEND STREQUAL "libssh2-embedded")
		IF(NOT EMBED_SSH_PATH)
			MESSAGE(FATAL_ERROR "Asked for embedded libssh2 backend, but it wasn't found."
				"Please pass the path to it (-DEMBED_SSH_PATH=/path/to/libssh2")
		ENDIF()

		FILE(GLOB EMBED_SSH_SOURCES "${EMBED_SSH_PATH}/src/*.c")
		ADD_LIBRARY(SshBackend STATIC ${EMBED_SSH_SOURCES})
		TARGET_INCLUDE_DIRECTORIES(SshBackend PUBLIC "${EMBED_SSH_PATH}/include")
		FILE(WRITE "${EMBED_SSH_PATH}/src/libssh2_config.h" "#define HAVE_WINCNG\n#define LIBSSH2_WINCNG\n#include \"../win32/libssh2_config.h\"")
	ELSEIF(SSH_BACKEND STREQUAL "libssh2")
		# Optional external dependency: libssh2
		IF(NOT LIBSSH2_FOUND)
			MESSAGE(FATAL_ERROR "Asked for libssh2 backend, but it wasn't found")
		ENDIF()

		CHECK_LIBRARY_EXISTS("${LIBSSH2_LIBRARIES}" libssh2_userauth_publickey_frommemory "${LIBSSH2_LIBRARY_DIRS}" HAVE_LIBSSH2_MEMORY_CREDENTIALS)
		IF (HAVE_LIBSSH2_MEMORY_CREDENTIALS)
			SET(GIT_SSH_MEMORY_CREDENTIALS 1 PARENT_SCOPE)
		ENDIF()

		ADD_LIBRARY(SshBackend INTERFACE)
		TARGET_INCLUDE_DIRECTORIES(SshBackend SYSTEM INTERFACE ${LIBSSH2_INCLUDE_DIRS})
		TARGET_LINK_LIBRARIES(SshBackend INTERFACE ${LIBSSH2_LIBRARIES})
		LIST(APPEND LIBGIT2_PC_LIBS ${LIBSSH2_LDFLAGS})
	ELSE()
		MESSAGE(FATAL_ERROR "Asked for backend ${HTTPS_BACKEND} but it wasn't found")
	ENDIF()

	SET(GIT_SSH 1 PARENT_SCOPE)
	ADD_FEATURE_INFO(SSH ON "using ${SSH_BACKEND}")
ELSE()
	ADD_LIBRARY(SshBackend INTERFACE)
	ADD_FEATURE_INFO(SSH OFF "SSH transport support")
ENDIF()
