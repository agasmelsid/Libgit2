# Specify regular expression implementation
FIND_PACKAGE(PCRE)
FIND_PACKAGE(PCRE2)

IF(REGEX_BACKEND STREQUAL "")
	CHECK_SYMBOL_EXISTS(regcomp_l "regex.h;xlocale.h" HAVE_REGCOMP_L)

	IF(HAVE_REGCOMP_L)
		SET(REGEX_BACKEND "regcomp_l")
	ELSEIF(PCRE_FOUND)
		SET(REGEX_BACKEND "pcre")
	ELSE()
		SET(REGEX_BACKEND "builtin")
	ENDIF()
ENDIF()

IF(REGEX_BACKEND STREQUAL "regcomp_l")
	SET(GIT_REGEX_REGCOMP_L 1 PARENT_SCOPE)
	ADD_LIBRARY(RegexBackend INTERFACE)
ELSEIF(REGEX_BACKEND STREQUAL "pcre2")
	IF(NOT PCRE2_FOUND)
		MESSAGE(FATAL_ERROR "PCRE2 support was requested but not found")
	ENDIF()

	SET(GIT_REGEX_PCRE2 1 PARENT_SCOPE)

	ADD_LIBRARY(RegexBackend INTERFACE)
	TARGET_INCLUDE_DIRECTORIES(RegexBackend SYSTEM INTERFACE ${PCRE2_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(RegexBackend INTERFACE ${PCRE2_LIBRARIES})
	LIST(APPEND LIBGIT2_PC_REQUIRES "libpcre2")
ELSEIF(REGEX_BACKEND STREQUAL "pcre")
	IF(NOT PCRE_FOUND)
		MESSAGE(FATAL_ERROR "PCRE support was requested but not found")
	ENDIF()

	SET(GIT_REGEX_PCRE 1 PARENT_SCOPE)

	ADD_LIBRARY(RegexBackend INTERFACE)
	TARGET_INCLUDE_DIRECTORIES(RegexBackend SYSTEM INTERFACE ${PCRE_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(RegexBackend INTERFACE ${PCRE_LIBRARIES})
	LIST(APPEND LIBGIT2_PC_REQUIRES "libpcre")
ELSEIF(REGEX_BACKEND STREQUAL "regcomp")
	SET(GIT_REGEX_REGCOMP 1 PARENT_SCOPE)
	ADD_LIBRARY(RegexBackend INTERFACE)
ELSEIF(REGEX_BACKEND STREQUAL "builtin")
	SET(GIT_REGEX_BUILTIN 1 PARENT_SCOPE)
	ADD_SUBDIRECTORY("${libgit2_SOURCE_DIR}/deps/pcre" "${libgit2_BINARY_DIR}/deps/pcre")
	ADD_LIBRARY(RegexBackend ALIAS pcre)
ELSE()
	MESSAGE(FATAL_ERROR "The REGEX_BACKEND option provided is not supported")
ENDIF()

ADD_FEATURE_INFO(regex ON "using ${REGEX_BACKEND}")
