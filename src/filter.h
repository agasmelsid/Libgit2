/*
 * Copyright (C) the libgit2 contributors. All rights reserved.
 *
 * This file is part of libgit2, distributed under the GNU GPL v2 with
 * a Linking Exception. For full terms see the included COPYING file.
 */
#ifndef INCLUDE_filter_h__
#define INCLUDE_filter_h__

#include "common.h"
#include "buffer.h"
#include "git2/odb.h"
#include "git2/repository.h"
#include "git2/filter.h"

/**
 * Structure describing a filter.
 *
 * The filter must be able to know when it should apply (through the
 * `must_be_applied()` function), and must be able to filter both from
 * the workdir to the odb, and from the odb to the workdir.
 *
 * - `should_apply_to_path` must return 0 if the filter shouldn't be applied
 *   for the passed path and the passed direction (to odb or to workdir).
 * - `apply_to_odb` must apply the filter to the passed `source`, and store the
 *   result in `dst`. `source` may contain NUL characters , so the filter should
 *   rely on the `source_size` to get the real length of the content to filter.
 *   The filter must also store the filtered content length in `dst_size`.
 * - `apply_to_workdir` must apply the filter to the passed `source`, and store the
 *   result in `dst`. `source` may contain NUL characters , so the filter should
 *   rely on the `source_size` to get the real length of the content to filter.
 *   The filter must also store the filtered content length in `dst_size`.
 * - `do_free` free filter-specific resources. Called when freeing a repository
 *   through `git_repository_free`
 */
struct git_filter {
	char *name;

	should_apply_to_path_cb should_apply_to_path;
	apply_to_cb apply_to_odb;
	apply_to_cb apply_to_workdir;
	do_free_cb do_free;
};

typedef enum {
	GIT_CRLF_GUESS = -1,
	GIT_CRLF_BINARY = 0,
	GIT_CRLF_TEXT,
	GIT_CRLF_INPUT,
	GIT_CRLF_CRLF,
	GIT_CRLF_AUTO,
} git_crlf_t;

typedef struct git_filter_internal {
	git_filter *filter;
	git_repository *repo;
	char *path;
	git_filter_mode_t mode;
} git_filter_internal;

/*
 * FILTER API
 */

/*
 * For any given path in the working directory, fill the `filters`
 * array with the relevant filters that need to be applied.
 *
 * Mode is either `GIT_FILTER_TO_WORKDIR` if you need to load the
 * filters that will be used when checking out a file to the working
 * directory, or `GIT_FILTER_TO_ODB` for the filters used when writing
 * a file to the ODB.
 *
 * @param filters Vector where to store all the loaded filters
 * @param repo Repository object that contains `path`
 * @param path Relative path of the file to be filtered
 * @param mode Filtering direction (WT->ODB or ODB->WT)
 * @return the number of filters loaded for the file (0 if the file
 *	doesn't need filtering), or a negative error code
 */
extern int git_filters__get_filters_to_apply(git_vector *filters, git_repository *repo, const char *path, git_filter_mode_t mode);

/*
 * Apply one or more filters to a file.
 *
 * The file must have been loaded as a `git_buf` object. Both the `source`
 * and `dest` buffers are owned by the caller and must be freed once
 * they are no longer needed.
 *
 * NOTE: Because of the double-buffering schema, the `source` buffer that contains
 * the original file may be tampered once the filtering is complete. Regardless, 
 * the `dest` buffer will always contain the final result of the filtering
 *
 * @param dest Buffer to store the result of the filtering
 * @param source Buffer containing the document to filter
 * @param filters A non-empty vector of filters as supplied by `git_filters_load`
 * @return 0 on success, an error code otherwise
 */
extern int git_filters__apply(git_buf *dest, git_buf *source, git_vector *filters);

/*
 * Free the `filters` array generated by `git_filters__get_filters_to_apply`.
 *
 * Note that this frees both the array and its contents. The array will
 * be clean/reusable after this call.
 *
 * @param filters A filters array as supplied by `git_filters__get_filters_to_apply`
 */
extern void git_filters__free(git_vector *filters);

/*
 * Available filters
 */

/* CRLF filter */
extern int git_filter_create__crlf_filter(git_filter **out);

#endif
